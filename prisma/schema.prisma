// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // Use direct connection (bypass PgBouncer) for migrations to avoid prepared statement issues
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  name           String
  password       String
  role           String // ADMIN, DOCTOR, NURSE, RECEPTIONIST, SUPERADMIN
  department     String?
  specialization String?
  isActive       Boolean   @default(true)
  lastLogin      DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  appointments       Appointment[]
  consultations      Consultation[]
  prescriptions      Prescription[]
  sessionAssignments DoctorSessionAssignment[]
  doctorAvailability DoctorAvailability[]
  doctorBills        Bill[] @relation("DoctorBills")
  createdBills       Bill[] @relation("CreatedBills")
  consultationFees   DoctorConsultationFee[] @relation("DoctorFees")

  // Audit log back-relations
  assignmentLogsFrom AppointmentAssignmentLog[] @relation("FromDoctor")
  assignmentLogsTo   AppointmentAssignmentLog[] @relation("ToDoctor")
  assignmentLogsBy   AppointmentAssignmentLog[] @relation("ChangedByUser")
  
  // IPD Relations
  admissions         Admission[] @relation("AdmittedBy")
  
  // IPD Relations
  requestedAdmissions  AdmissionRequest[] @relation("RequestingDoctor")
  processedRequests    AdmissionRequest[] @relation("ProcessedRequests")
  billingTransactions  BillingTransaction[] @relation("ProcessedTransactions")
  
  // Dynamic Role Relations
  customRoles        UserRole[] @relation("UserRoles")
  assignedRoles      UserRole[] @relation("RoleAssignedBy")

  @@map("users")
}

model Patient {
  id               String    @id @default(cuid())
  firstName        String
  lastName         String
  email            String?
  phone            String    @unique
  dateOfBirth      DateTime?
  gender           String? // MALE, FEMALE, OTHER
  address          String?
  idProof          String?
  idNumber         String?
  emergencyContact String?
  bloodGroup       String?
  allergies        String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  appointments    Appointment[]
  prescriptions   Prescription[]
  bills           Bill[]
  vitals          Vital[]
  consultations   Consultation[]
  admissions      Admission[]
  admissionRequests AdmissionRequest[]
  billingTransactions BillingTransaction[]

  @@index([phone])
  @@index([firstName, lastName])
  @@index([createdAt])
  @@index([email])
  @@index([dateOfBirth])
  @@index([gender])
  @@index([bloodGroup])
  @@map("patients")
}

model Appointment {
  id                String    @id @default(cuid())
  patientId         String
  doctorId          String
  dateTime          DateTime
  type              String    @default("CONSULTATION") // CONSULTATION, FOLLOW_UP, EMERGENCY, ROUTINE_CHECKUP
  status            String    @default("SCHEDULED") // SCHEDULED, ARRIVED, WAITING, IN_CONSULTATION, COMPLETED, CANCELLED, NO_SHOW
  notes             String?
  tokenNumber       String? // Format: S1-001, S2-015, etc.
  sessionId         String?
  priority          String    @default("NORMAL") // EMERGENCY, HIGH, NORMAL, LOW
  estimatedDuration Int?      @default(30) // in minutes
  actualStartTime   DateTime?
  actualEndTime     DateTime?
  
  // Consent/Audit
  consentAccepted   Boolean   @default(false)
  consentVersion    String?
  consentAt         DateTime?
  consentIp         String?
  consentUserAgent  String?
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  patient       Patient       @relation(fields: [patientId], references: [id])
  doctor        User          @relation(fields: [doctorId], references: [id])
  session       AppointmentSession? @relation(fields: [sessionId], references: [id])
  bills         Bill[]
  consultation  Consultation?
  assignmentLogs AppointmentAssignmentLog[]
  problemCategories AppointmentProblemCategory[]

  @@index([tokenNumber])
  @@index([patientId, dateTime])
  @@index([doctorId, status])
  @@index([sessionId, status])
  @@index([dateTime, status])
  @@index([priority, status])
  @@index([type, status])
  @@index([status, createdAt])
  @@map("appointments")
}

model Consultation {
  id             String    @id @default(cuid())
  appointmentId  String    @unique
  patientId      String
  doctorId       String
  chiefComplaint String?
  history        String?
  examination    String?
  diagnosis      String?
  treatment      String?
  notes          String?
  followUpDate   DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  appointment  Appointment   @relation(fields: [appointmentId], references: [id])
  patient      Patient       @relation(fields: [patientId], references: [id])
  doctor       User          @relation(fields: [doctorId], references: [id])
  prescription Prescription?

  @@index([patientId])
  @@index([doctorId])
  @@index([createdAt])
  @@index([followUpDate])
  @@map("consultations")
}

model Prescription {
  id             String   @id @default(cuid())
  consultationId String?  @unique
  patientId      String
  doctorId       String
  medicines      String // JSON string of medicine objects
  instructions   String?
  symptoms       String? // SOAP - Subjective
  diagnosis      String? // SOAP - Assessment
  notes          String? // SOAP - Plan
  vitals         String? // SOAP - Objective (JSON)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relations
  consultation Consultation? @relation(fields: [consultationId], references: [id])
  patient      Patient       @relation(fields: [patientId], references: [id])
  doctor       User          @relation(fields: [doctorId], references: [id])
  bills         Bill[]
  admissionRequests AdmissionRequest[]
  
  @@index([createdAt])
  @@index([patientId])
  @@index([doctorId])
  @@index([patientId, createdAt])
  @@index([doctorId, createdAt])
  @@map("prescriptions")
}

model AppointmentSession {
  id            String   @id @default(cuid())
  date          DateTime
  name          String // "Morning", "Afternoon", "Evening"
  shortCode     String // "S1", "S2", "S3"
  startTime     String // "09:00"
  endTime       String // "13:00"
  maxTokens     Int      @default(50)
  currentTokens Int      @default(0)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  appointments      Appointment[]
  doctorAssignments DoctorSessionAssignment[]
  
  @@unique([date, shortCode])
  @@index([date])
  @@index([date, isActive])
  @@index([isActive, date])
  @@map("appointment_sessions")
}

model Bill {
  id              String   @id @default(cuid())
  billNumber      String   @unique
  patientId       String
  prescriptionId  String?
  appointmentId   String?
  doctorId        String
  
  // Bill Details
  consultationFee Float?
  totalAmount     Float
  cgst            Float?
  sgst            Float?
  igst            Float?
  discountAmount  Float?
  finalAmount     Float
  
  // Payment Details
  paymentStatus   String @default("PENDING") // PENDING, PARTIAL, PAID, CANCELLED, REFUNDED
  paymentMethod   String?
  paidAmount      Float?
  balanceAmount   Float?
  
  // Metadata
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdBy       String
  
  // Relations
  patient         Patient      @relation(fields: [patientId], references: [id])
  prescription    Prescription? @relation(fields: [prescriptionId], references: [id])
  appointment     Appointment? @relation(fields: [appointmentId], references: [id])
  doctor          User         @relation("DoctorBills", fields: [doctorId], references: [id])
  createdByUser   User         @relation("CreatedBills", fields: [createdBy], references: [id])
  billItems       BillItem[]
  billingTransactions BillingTransaction[]
  
  @@index([billNumber])
  @@index([patientId, createdAt])
  @@index([paymentStatus])
  @@index([createdAt])
  @@index([doctorId])
  @@index([prescriptionId])
  @@map("bills")
}

model BillItem {
  id          String  @id @default(cuid())
  billId      String
  itemType    String // CONSULTATION, MEDICINE, LAB_TEST, THERAPY, PROCEDURE, OTHER
  itemName    String
  quantity    Int     @default(1)
  unitPrice   Float?
  totalPrice  Float?
  gstRate     Float?
  
  // Relations
  bill        Bill    @relation(fields: [billId], references: [id], onDelete: Cascade)
  
  @@index([billId])
  @@map("bill_items")
}

model DoctorConsultationFee {
  id            String  @id @default(cuid())
  doctorId      String
  consultationType String @default("GENERAL") // GENERAL, SPECIALIST, EMERGENCY
  fee           Float
  isActive      Boolean @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  doctor        User    @relation("DoctorFees", fields: [doctorId], references: [id])
  
  @@unique([doctorId, consultationType])
  @@index([doctorId])
  @@map("doctor_consultation_fees")
}


model HospitalSettings {
  id             String  @id @default(cuid())
  name           String  @default("MediCare Hospital")
  tagline        String  @default("Your Health, Our Priority")
  logo           String?
  primaryColor   String  @default("#2563eb")
  secondaryColor String  @default("#1e40af")
  phone          String  @default("+1 (555) 123-4567")
  email          String  @default("info@medicare.com")
  address        String  @default("123 Health Street, Medical City, MC 12345")
  vision         String  @default("To be the leading healthcare provider")
  mission        String  @default("We are committed to providing comprehensive healthcare")

  // Appointment Settings
  tokenPrefix            String  @default("T")
  sessionPrefix          String  @default("S")
  defaultSessionDuration Int     @default(240) // 4 hours in minutes
  maxTokensPerSession    Int     @default(50)
  allowPublicBooking     Boolean @default(true)
  requirePatientDetails  Boolean @default(true)
  autoAssignTokens       Boolean @default(true)
  enableCarryForward     Boolean @default(true)

  // Business Hours
  businessStartTime String @default("09:00")
  businessEndTime   String @default("17:00")
  lunchBreakStart   String @default("13:00")
  lunchBreakEnd     String @default("14:00")

  // Social Media
  socialFacebook  String?
  socialTwitter   String?
  socialInstagram String?
  socialLinkedin  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("hospital_settings")
}

// Pharmacy Module Models
model GstSlab {
  id          String   @id @default(cuid())
  name        String   @unique // "0% GST", "5% GST", "12% GST", "18% GST", "28% GST"
  rate        Float    // 0.0, 5.0, 12.0, 18.0, 28.0
  description String?  // "Essential medicines", "Luxury items", etc.
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  medicines Medicine[]

  @@index([rate])
  @@index([isActive])
  @@map("gst_slabs")
}

model MedicineCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  gstRate     Float    @default(5.0) // Default GST rate for this category
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  medicines Medicine[]

  @@index([name])
  @@index([isActive])
  @@map("medicine_categories")
}

model Supplier {
  id           String   @id @default(cuid())
  name         String   @unique
  contactPerson String?
  phone        String?
  email        String?
  address      String?
  gstNumber    String?
  creditTerms  Int?     @default(30) // days
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  stocks MedicineStock[]

  @@index([name])
  @@index([isActive])
  @@map("suppliers")
}

model Medicine {
  id                   String   @id @default(cuid())
  name                 String   @unique
  genericName          String
  brand                String
  manufacturer         String
  categoryId           String
  gstSlabId            String
  dosageForm           String   // Tablet, Capsule, Syrup, Injection, etc.
  strength             String   // 500mg, 10ml, etc.
  unitType             String   // Strip of 10, Bottle 100ml, etc.
  mrp                  Float    // Maximum Retail Price
  purchasePrice        Float    // Cost price
  marginPercentage     Float    // Calculated margin %
  prescriptionRequired Boolean  @default(true)
  isActive             Boolean  @default(true)
  description          String?
  sideEffects          String?
  contraindications    String?
  dosageInstructions   String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relations
  category MedicineCategory @relation(fields: [categoryId], references: [id])
  gstSlab  GstSlab          @relation(fields: [gstSlabId], references: [id])
  stocks   MedicineStock[]

  @@index([name])
  @@index([genericName])
  @@index([brand])
  @@index([categoryId])
  @@index([manufacturer])
  @@index([isActive])
  @@index([prescriptionRequired])
  @@index([name, isActive])
  @@map("medicines")
}

model MedicineStock {
  id                 String    @id @default(cuid())
  medicineId         String
  supplierId         String
  batchNumber        String
  expiryDate         DateTime
  quantity           Int       // Total quantity purchased
  availableQuantity  Int       // Current available quantity
  purchasePrice      Float     // Price at which purchased
  mrp               Float     // MRP for this batch
  manufacturingDate  DateTime?
  location           String?   // Storage location
  isActive           Boolean   @default(true)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Relations
  medicine Medicine @relation(fields: [medicineId], references: [id])
  supplier Supplier @relation(fields: [supplierId], references: [id])

  @@index([medicineId])
  @@index([supplierId])
  @@index([batchNumber])
  @@index([expiryDate])
  @@index([availableQuantity])
  @@index([isActive])
  @@index([medicineId, isActive])
  @@index([expiryDate, isActive])
  @@map("medicine_stock")
}

model Vital {
  id            String   @id @default(cuid())
  patientId     String
  temperature   Float?
  bloodPressure String? // "120/80"
  heartRate     Int?
  weight        Float?
  height        Float?
  bmi           Float?
  notes         String?
  recordedAt    DateTime @default(now())
  recordedBy    String?

  // Relations
  patient Patient @relation(fields: [patientId], references: [id])

  @@index([patientId])
  @@index([recordedAt])
  @@index([patientId, recordedAt])
  @@map("vitals")
}


model DoctorSessionAssignment {
  id        String @id @default(cuid())
  doctorId  String
  sessionId String
  isActive  Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  doctor  User             @relation(fields: [doctorId], references: [id])
  session AppointmentSession @relation(fields: [sessionId], references: [id])

  @@unique([doctorId, sessionId])
  @@index([doctorId])
  @@index([sessionId])
  @@index([isActive])
  @@map("doctor_session_assignments")
}

model DoctorAvailability {
  id          String    @id @default(cuid())
  doctorId    String
  type        String    // UNAVAILABLE, LEAVE, HOLIDAY, CUSTOM
  startDate   DateTime
  endDate     DateTime?
  startTime   String?   // For time-specific unavailability
  endTime     String?
  weekdays    String?   // JSON array of weekdays [1,2,3] for recurring
  reason      String?
  isRecurring Boolean   @default(false)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  doctor User @relation(fields: [doctorId], references: [id])

  @@index([doctorId])
  @@index([startDate, endDate])
  @@index([type])
  @@index([isActive])
  @@index([doctorId, isActive])
  @@index([startDate, isActive])
  @@map("doctor_availability")
}

// Audit log for appointment doctor reassignment
model AppointmentAssignmentLog {
  id             String   @id @default(cuid())
  appointmentId  String
  fromDoctorId   String?
  toDoctorId     String
  changedBy      String
  reason         String?
  createdAt      DateTime @default(now())

  // Relations
  appointment    Appointment @relation(fields: [appointmentId], references: [id])
  fromDoctor     User?       @relation("FromDoctor", fields: [fromDoctorId], references: [id])
  toDoctor       User        @relation("ToDoctor", fields: [toDoctorId], references: [id])
  changedByUser  User        @relation("ChangedByUser", fields: [changedBy], references: [id])

  @@index([appointmentId])
  @@index([toDoctorId])
  @@index([changedBy])
  @@index([createdAt])
  @@map("appointment_assignment_logs")
}

model ProblemCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  color       String?  // hex color for UI display
  icon        String?  // icon name for UI display
  isActive    Boolean  @default(true)
  sortOrder   Int?     // for custom ordering in UI
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  appointments AppointmentProblemCategory[]

  @@index([isActive])
  @@index([sortOrder])
  @@index([name, isActive])
  @@map("problem_categories")
}

model AppointmentProblemCategory {
  id                String @id @default(cuid())
  appointmentId     String
  problemCategoryId String
  createdAt         DateTime @default(now())

  // Relations
  appointment     Appointment     @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  problemCategory ProblemCategory @relation(fields: [problemCategoryId], references: [id], onDelete: Cascade)

  @@unique([appointmentId, problemCategoryId])
  @@index([appointmentId])
  @@index([problemCategoryId])
  @@map("appointment_problem_categories")
}

// IPD (In-Patient Department) Models for Bed Management
model Ward {
  id          String   @id @default(cuid())
  name        String   @unique // "General Ward", "ICU", "Private Ward", "Semi-Private Ward"
  description String?
  floor       String?  // "Ground Floor", "First Floor", etc.
  department  String?  // "Cardiology", "Pediatrics", "General Medicine"
  capacity    Int      @default(10) // Total beds in this ward
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  bedTypes BedType[]
  beds     Bed[]

  @@index([name])
  @@index([isActive])
  @@index([department])
  @@map("wards")
}

model BedType {
  id            String   @id @default(cuid())
  wardId        String
  name          String   // "General", "Semi-Private", "Private", "ICU", "Deluxe"
  description   String?
  dailyRate     Float?   // Daily charge for this bed type
  amenities     String?  // JSON string of amenities
  maxOccupancy  Int      @default(1) // Usually 1, but may be 2 for shared beds
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  ward Ward @relation(fields: [wardId], references: [id], onDelete: Cascade)
  beds Bed[]

  @@unique([wardId, name])
  @@index([wardId])
  @@index([isActive])
  @@index([name])
  @@map("bed_types")
}

model Bed {
  id          String   @id @default(cuid())
  wardId      String
  bedTypeId   String
  bedNumber   String   // "B001", "ICU-01", "PVT-205", etc.
  status      String   @default("AVAILABLE") // AVAILABLE, OCCUPIED, MAINTENANCE, BLOCKED
  notes       String?  // Maintenance notes, special instructions
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  ward         Ward        @relation(fields: [wardId], references: [id], onDelete: Cascade)
  bedType      BedType     @relation(fields: [bedTypeId], references: [id])
  admissions   Admission[]

  @@unique([bedNumber]) // Bed numbers must be unique across hospital
  @@unique([wardId, bedNumber]) // Also ensure uniqueness within ward
  @@index([wardId])
  @@index([bedTypeId])
  @@index([status])
  @@index([isActive])
  @@index([wardId, status])
  @@map("beds")
}

model Admission {
  id              String    @id @default(cuid())
  patientId       String
  bedId           String
  admittedBy      String    // Doctor ID who admitted
  admissionDate   DateTime  @default(now())
  dischargeDate   DateTime?
  status          String    @default("ACTIVE") // ACTIVE, DISCHARGED, TRANSFERRED
  admissionType   String    @default("EMERGENCY") // EMERGENCY, PLANNED, REFERRAL
  
  // Medical Details
  diagnosis       String?
  chiefComplaint  String?
  admissionNotes  String?
  dischargeNotes  String?
  
  // Administrative
  estimatedStay   Int?      // Days
  totalBillAmount Float?    // Total bill for this admission
  insuranceInfo   String?   // JSON string with insurance details
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  patient       Patient @relation(fields: [patientId], references: [id])
  bed           Bed     @relation(fields: [bedId], references: [id])
  admittedByUser User   @relation("AdmittedBy", fields: [admittedBy], references: [id])
  admissionRequest AdmissionRequest?
  billingTransactions BillingTransaction[]

  @@index([patientId])
  @@index([bedId])
  @@index([admittedBy])
  @@index([status])
  @@index([admissionDate])
  @@index([dischargeDate])
  @@index([patientId, status])
  @@index([bedId, status])
  @@map("admissions")
}

// IPD Admission Request - Created when doctor requests IPD admission
model AdmissionRequest {
  id                 String    @id @default(cuid())
  patientId          String
  doctorId           String
  prescriptionId     String?   // Link to prescription if created via prescription
  
  // Request Details
  wardType           String?   // Preferred ward type
  bedType            String?   // Preferred bed type  
  urgency            String    @default("NORMAL") // EMERGENCY, HIGH, NORMAL, LOW
  estimatedStay      Int?      // Days
  diagnosis          String?
  chiefComplaint     String?
  notes              String?
  
  // Status Management
  status             String    @default("PENDING") // PENDING, APPROVED, REJECTED, CONVERTED
  requestedAt        DateTime  @default(now())
  processedAt        DateTime?
  processedBy        String?   // IPD staff who processed
  rejectionReason    String?
  
  // Conversion to Admission
  admissionId        String?   @unique // Once converted to admission
  
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  
  // Relations
  patient            Patient      @relation(fields: [patientId], references: [id])
  doctor             User         @relation("RequestingDoctor", fields: [doctorId], references: [id])
  prescription       Prescription? @relation(fields: [prescriptionId], references: [id])
  processedByUser    User?        @relation("ProcessedRequests", fields: [processedBy], references: [id])
  admission          Admission?   @relation(fields: [admissionId], references: [id])
  
  @@index([patientId])
  @@index([doctorId])
  @@index([status])
  @@index([requestedAt])
  @@index([urgency, status])
  @@index([status, requestedAt])
  @@map("admission_requests")
}

// IPD Settings for advance deposit configuration
model IPDSettings {
  id                    String   @id @default(cuid())
  
  // Advance Deposit Configuration
  defaultDepositAmount  Float?   // Fixed amount
  defaultDepositPercent Float?   // Percentage of estimated bill
  minimumDepositAmount  Float?   // Minimum required
  
  // Ward-specific deposit overrides (JSON)
  wardDepositRules      String?  // {"ICU": {"amount": 50000}, "General": {"percent": 30}}
  
  // Billing Configuration  
  autoGenerateBills     Boolean  @default(true)
  dailyBillingTime      String?  @default("06:00") // When to generate daily bed charges
  
  // Discharge Configuration
  requireDoctorDischarge Boolean  @default(true)
  autoCalculateFinal    Boolean  @default(true)
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@map("ipd_settings")
}

// Billing Transactions for tracking deposits and payments
model BillingTransaction {
  id              String   @id @default(cuid())
  admissionId     String?
  billId          String?
  patientId       String
  
  // Transaction Details
  type            String   // DEPOSIT, PAYMENT, REFUND, ADJUSTMENT
  amount          Float
  description     String?
  reference       String?  // Receipt number, transaction ID
  
  // Payment Details
  paymentMethod   String?  // CASH, CARD, UPI, BANK_TRANSFER
  paymentStatus   String   @default("COMPLETED") // PENDING, COMPLETED, FAILED, CANCELLED
  
  // Metadata
  processedBy     String
  processedAt     DateTime @default(now())
  createdAt       DateTime @default(now())
  
  // Relations
  admission       Admission? @relation(fields: [admissionId], references: [id])
  bill            Bill?      @relation(fields: [billId], references: [id])
  patient         Patient    @relation(fields: [patientId], references: [id])
  processedByUser User       @relation("ProcessedTransactions", fields: [processedBy], references: [id])
  
  @@index([admissionId])
  @@index([billId])
  @@index([patientId])
  @@index([type])
  @@index([processedAt])
  @@index([paymentStatus])
  @@map("billing_transactions")
}

// Dynamic Role and Permission System
model CustomRole {
  id          String   @id @default(cuid())
  name        String   @unique // "NURSE_SUPERVISOR", "LAB_TECHNICIAN", "BILLING_MANAGER"
  displayName String   // "Nurse Supervisor", "Lab Technician", "Billing Manager"
  description String?
  isActive    Boolean  @default(true)
  isSystem    Boolean  @default(false) // System roles cannot be deleted
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  permissions RolePermission[]
  users       UserRole[]

  @@index([name])
  @@index([isActive])
  @@index([isSystem])
  @@map("custom_roles")
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique // "patients.read", "appointments.create", "bills.delete"
  displayName String   // "View Patients", "Create Appointments", "Delete Bills"
  description String?
  module      String   // "patients", "appointments", "bills", "settings", "ipd"
  action      String   // "create", "read", "update", "delete", "manage"
  resource    String?  // Specific resource if applicable
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  roles RolePermission[]

  @@unique([module, action, resource])
  @@index([module])
  @@index([action])
  @@index([isActive])
  @@index([module, action])
  @@map("permissions")
}

model RolePermission {
  id           String @id @default(cuid())
  roleId       String
  permissionId String
  createdAt    DateTime @default(now())

  // Relations
  role       CustomRole @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
  @@map("role_permissions")
}

model UserRole {
  id        String   @id @default(cuid())
  userId    String
  roleId    String
  assignedBy String? // Admin who assigned this role
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user         User       @relation("UserRoles", fields: [userId], references: [id], onDelete: Cascade)
  role         CustomRole @relation(fields: [roleId], references: [id], onDelete: Cascade)
  assignedByUser User?    @relation("RoleAssignedBy", fields: [assignedBy], references: [id])

  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
  @@index([isActive])
  @@map("user_roles")
}

// OT (Operation Theatre) Services Configuration
model OTService {
  id          String   @id @default(cuid())
  name        String   @unique // "General Surgery", "Orthopedic Surgery", "Cardiac Surgery"
  description String?
  basePrice   Float    // Base price for the service
  duration    Int?     @default(60) // Duration in minutes
  category    String?  // "MAJOR", "MINOR", "EMERGENCY", "DAY_CARE"
  department  String?  // "Surgery", "Orthopedics", "Cardiology"
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  procedures  OTProcedure[]

  @@index([name])
  @@index([isActive])
  @@index([category])
  @@index([department])
  @@map("ot_services")
}

model OTProcedure {
  id          String   @id @default(cuid())
  serviceId   String
  name        String   // "Appendectomy", "Knee Replacement", "Bypass Surgery"
  code        String?  // Procedure code for billing
  description String?
  price       Float    // Price for this specific procedure
  duration    Int?     @default(60) // Duration in minutes
  complexity  String?  @default("MEDIUM") // "LOW", "MEDIUM", "HIGH", "CRITICAL"
  anesthesia  String?  // "LOCAL", "GENERAL", "SPINAL", "EPIDURAL"
  // Default billing breakdown for this procedure (JSON)
  // {
  //   "surgeonFee": number,
  //   "assistantFee": number,
  //   "anesthesiaFee": number,
  //   "otRoomRatePerHour": number,
  //   "defaultOtRoomHours": number,
  //   "emergencySurcharge": number,
  //   "nightSurcharge": number,
  //   "weekendSurcharge": number
  // }
  billingDefaults Json?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  service     OTService @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([serviceId, name])
  @@index([serviceId])
  @@index([isActive])
  @@index([complexity])
  @@index([code])
  @@map("ot_procedures")
}

// Imaging Services Configuration
model ImagingService {
  id          String   @id @default(cuid())
  name        String   @unique // "X-Ray", "CT Scan", "MRI", "Ultrasound"
  description String?
  basePrice   Float    // Base price for the service
  duration    Int?     @default(30) // Duration in minutes
  category    String?  // "ROUTINE", "CONTRAST", "EMERGENCY", "SPECIALIZED"
  modality    String   // "X-RAY", "CT", "MRI", "ULTRASOUND", "MAMMOGRAPHY", "NUCLEAR"
  bodyPart    String?  // "CHEST", "ABDOMEN", "HEAD", "SPINE", "EXTREMITIES", "PELVIS"
  contrast    Boolean  @default(false) // Whether contrast is required
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  procedures  ImagingProcedure[]

  @@index([name])
  @@index([isActive])
  @@index([category])
  @@index([modality])
  @@index([bodyPart])
  @@map("imaging_services")
}

model ImagingProcedure {
  id              String   @id @default(cuid())
  serviceId       String
  name            String   // "Chest X-Ray PA View", "Brain MRI with Contrast"
  code            String?  // CPT or local procedure code
  description     String?
  price           Float    // Price for this specific procedure
  duration        Int?     @default(30) // Duration in minutes
  preparation     String?  // "Fasting required", "Remove metal objects"
  contrastAgent   String?  // "Iodine", "Gadolinium", "Barium"
  // Default billing breakdown for this imaging procedure (JSON)
  // {
  //   "radiologistFee": number,
  //   "contrastSurcharge": number,
  //   "portableSurcharge": number,
  //   "urgentSurcharge": number,
  //   "filmCdCharge": number,
  //   "defaultContrastUsed": boolean
  // }
  billingDefaults Json?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  service         ImagingService @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([serviceId, name])
  @@index([serviceId])
  @@index([isActive])
  @@index([code])
  @@map("imaging_procedures")
}

// Enums replaced with string fields with comments for valid values
// UserRole: ADMIN, DOCTOR, RECEPTIONIST
// Gender: MALE, FEMALE, OTHER  
// AppointmentType: CONSULTATION, FOLLOW_UP, EMERGENCY, WALK_IN
// AppointmentStatus: SCHEDULED, ARRIVED, WAITING, IN_CONSULTATION, COMPLETED, CANCELLED, NO_SHOW
// PaymentMethod: CASH, UPI, CARD, CHEQUE
// PaymentStatus: PENDING, PAID, PARTIAL, REFUNDED
// BedStatus: AVAILABLE, OCCUPIED, MAINTENANCE, BLOCKED
// AdmissionStatus: ACTIVE, DISCHARGED, TRANSFERRED
// AdmissionType: EMERGENCY, PLANNED, REFERRAL

// OT and Imaging Requests
model OtRequest {
  id              String   @id @default(cuid())
  admissionId     String
  patientId       String
  doctorId        String
  procedureId     String?  // from OTProcedure; null if custom
  customName      String?
  priority        String?  // EMERGENCY, HIGH, NORMAL, LOW
  notes           String?
  status          String   @default("PENDING") // PENDING, SCHEDULED, DONE, CANCELLED
  scheduledAt     DateTime?
  performedAt     DateTime?
  performedById   String?
  requestedBasePrice Float? // for custom requests; snapshot at completion to basePriceUsed
  basePriceUsed   Float?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([admissionId, status])
  @@index([patientId, status])
  @@index([doctorId, status])
  @@map("ot_requests")
}

model ImagingRequest {
  id              String   @id @default(cuid())
  admissionId     String
  patientId       String
  doctorId        String
  procedureId     String?  // from ImagingProcedure; null if custom
  customName      String?
  contrastReq     Boolean  @default(false) // requested contrast
  priority        String?
  notes           String?
  status          String   @default("PENDING")
  scheduledAt     DateTime?
  performedAt     DateTime?
  performedById   String?
  requestedBasePrice Float?
  basePriceUsed   Float?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([admissionId, status])
  @@index([patientId, status])
  @@index([doctorId, status])
  @@map("imaging_requests")
}
